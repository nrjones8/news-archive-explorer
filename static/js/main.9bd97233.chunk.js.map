{"version":3,"sources":["NavBar.js","About.js","WebsiteUtils.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","href","process","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","About","src_NavBar","target","rel","WAPO","WSJ","websites","MIN_DATE","Date","MAX_DATE","IMAGE_STATUS_LOADING","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDayChange","bind","assertThisInitialized","handleTimeNavigation","updateLeftWebsite","updateRightWebsite","queryParams","queryString","parse","location","search","state","getInitialState","leftFromParams","siteOne","rightFromParams","siteTwo","leftWebsite","includes","rightWebsite","providedYear","parseInt","year","providedMonth","month","providedDay","day","providedHour","hour","hasNowParam","showNow","targetDate","moment","subtract","toDate","utc","concat","local","screenshotDateTime","copyLinkText","newDay","setState","ReactGA","event","category","action","label","format","newDateTime","intervalInHours","currentTarget","getAttribute","add","console","log","newSite","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","_this$state","base","window","host","_this2","intervalhours","onClick","index_esm","es","selected","onChange","showTimeSelect","dateFormat","timeFormat","timeIntervals","minDate","maxDate","lib","text","generateDeeplink","onCopy","setTimeout","App_ScreenshotCard","website","propogateWebsiteUpdate","screenshotUrl","ScreenshotCard","_this3","handleWebsiteChange","websiteName","imageStatus","prevProps","_this4","App_WebsitePicker","onWebsiteChange","site","_previewText","defineProperty","getWebsitePreviewText","role","style","display","src","alt","onLoad","onError","WebsitePicker","_this5","handleChange","value","map","key","Boolean","hostname","match","initialize","pageview","pathname","routing","react_router_dom","basename","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bd97233.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <a className=\"navbar-brand\" href={process.env.PUBLIC_URL + \"/#/\"}>News Homepage Archive</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#explorerNavBar\" aria-controls=\"explorerNavBar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"explorerNavBar\">\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item active\">\n                    {/* There is probably a better way to do this */}\n                    <a className=\"nav-link\" href={process.env.PUBLIC_URL + \"/#/\"}>Home</a>\n                </li>\n            </ul>\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item active\">\n                    {/* There is probably a better way to do this */}\n                    <a className=\"nav-link\" href={process.env.PUBLIC_URL + \"/#/about\"}>About</a>\n                </li>\n            </ul>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\n\nimport NavBar from './NavBar.js';\n\nimport 'bootswatch/dist/litera/bootstrap.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './App.css';\n\nclass About extends Component {\n  render() {\n    return (\n        <div>\n            <NavBar />\n            <div className=\"container mt-5\">\n                <h2>About this project</h2>\n                <p>\n                    The screenshots used in this project are taken once an hour, across a number of websites, starting January 1, 2019.\n                    You can find more information about the source of the screenshots, and how to use them for your own project, <a href=\"https://github.com/nrjones8/website-screenshotter#news-homepage-archive\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n                </p>\n                <p>\n                    This web app itself is built using React, and the code for it lives <a href=\"https://github.com/nrjones8/news-archive-explorer\">on Github</a>. If\n                    you have feedback or spot a bug, please file <a href=\"https://github.com/nrjones8/news-archive-explorer/issues\">a Github issue</a>, or if\n                    you aren't familiar with Github, send an email to newsscreenshotarchive@gmail.com.\n                </p>\n                <p>\n                    This project is unaffiliated with <a href=\"http://www.pastpages.org/\" target=\"_blank\" rel=\"noopener noreferrer\">PastPages</a>, a similar effort that took screenshots from 2012 to 2018 from a\n                    much wider range of news websites.\n                </p>\n                <p>Thanks for visiting!</p>\n            </div>\n        </div>\n    )\n  }\n}\nexport default About;\n","const NYT = \"nytimes.com\";\nconst WAPO = \"washingtonpost.com\";\nconst CNN = \"cnn.com\";\nconst WSJ = \"wsj.com\";\nconst FOX = \"foxnews.com\";\n\nconst websites = [NYT, WAPO, CNN, WSJ, FOX];\n\nfunction getWebsitePreviewText(site) {\n    const previewText = {\n        [WAPO]: \"For large parts of January and February 2019, screenshots failed \" +\n            \"only for washingtonpost.com. You may see a higher rate of blank \" +\n            \"screenshots during this period.\",\n        [WSJ]: \"For a large part of April and start of May 2019, the WSJ had an undismissed \" +\n            \"modal appear on the homepage. Screenshots during this period unfortunately are \" +\n            \"hidden beneath that modal; this will be changed soon!\"\n    }\n\n    // Fine with returning a default of null\n    return previewText[site];\n}\n\nexport {\n    websites,\n    getWebsitePreviewText\n}\n","import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport ReactGA from 'react-ga';\n\nimport { FaAngleLeft, FaAngleRight } from 'react-icons/fa';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport queryString from 'query-string';\nimport moment from 'moment';\n\nimport NavBar from './NavBar.js';\nimport { websites, getWebsitePreviewText } from './WebsiteUtils.js';\n\n// Based largely on https://upmostly.com/tutorials/create-simple-web-app-react-airtable/\n\nimport 'bootswatch/dist/litera/bootstrap.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './App.css';\n\n// When screenshots are first available - zero-indexed dates, this is JS\nconst MIN_DATE = new Date(2019, 0, 0);\n\n// TODO - make sure timezones are handled correctly here, they're probably not\nconst MAX_DATE = new Date();\n\n// Event like changing date, changing websites shown, etc\nconst EVENT_CAT_VIEW_CHANGE = 'Screenshot View Change';\nconst EVENT_TRACKING_MOMENT_FORMAT = 'YYYY-MM-DD, HH';\n\nconst SHARE_LINK_BTN_TEXT = 'Share link to current view';\n\nconst IMAGE_STATUS_LOADING = 'loading';\nconst IMAGE_STATUS_LOADED = 'loaded';\nconst IMAGED_STATUS_FAILED = 'failed';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleTimeNavigation = this.handleTimeNavigation.bind(this);\n    this.updateLeftWebsite = this.updateLeftWebsite.bind(this);\n    this.updateRightWebsite = this.updateRightWebsite.bind(this);\n\n    const queryParams = queryString.parse(props.location.search);\n    this.state = this.getInitialState(queryParams);\n  }\n\n  getInitialState(queryParams) {\n    const defaultLeft = \"nytimes.com\";\n    const defaultRight = \"foxnews.com\";\n\n    const leftFromParams = queryParams.siteOne;\n    const rightFromParams = queryParams.siteTwo;\n\n    // TODO - display something if the provided website isn't one of the supported ones?\n    // otherwise just looks like a bug to a user if their URL includes website X but website\n    // Y shows up\n    const leftWebsite = (leftFromParams && websites.includes(leftFromParams))\n      ? leftFromParams\n      : defaultLeft;\n\n    const rightWebsite = (rightFromParams && websites.includes(rightFromParams))\n      ? rightFromParams\n      : defaultRight;\n\n    const providedYear = parseInt(queryParams.year);\n    const providedMonth = parseInt(queryParams.month);\n    const providedDay = parseInt(queryParams.day);\n    const providedHour = parseInt(queryParams.hour);\n\n    // special case to show most recent screenshot, this is helpful for monitoring\n    const hasNowParam = !!queryParams.showNow;\n\n    // default to two days prior, unless full date was parsed from URL\n    let targetDate = moment(new Date()).subtract(2, 'days').toDate();\n\n    if (hasNowParam) {\n      targetDate = moment(new Date()).subtract(1, 'hours').toDate();\n    }\n\n    if (providedYear && providedMonth && providedDay && providedHour) {\n      const inUtc = moment.utc(\n        `${providedYear}-${providedMonth}-${providedDay}-${providedHour}`,\n        'YYYY-MM-DD-kk',\n      );\n      targetDate = inUtc.local().toDate();\n    }\n\n    // TODO - definitely display something if we can't parse the date\n    // TODO - this is likely redundant with the targetDate stuff above\n    const dateToUse = (targetDate && targetDate > MIN_DATE && targetDate <= MAX_DATE)\n      ? targetDate\n      : new Date(2019, 2, 26, 13);\n\n    return {\n      leftWebsite: leftWebsite,\n      rightWebsite: rightWebsite,\n      screenshotDateTime: dateToUse,\n\n      copyLinkText: SHARE_LINK_BTN_TEXT,\n    };\n  }\n\n  handleDayChange(newDay) {\n    this.setState({screenshotDateTime: newDay});\n\n    ReactGA.event({\n      category: EVENT_CAT_VIEW_CHANGE,\n      action: 'day change',\n      label: moment(newDay).format(EVENT_TRACKING_MOMENT_FORMAT),\n    });\n  }\n\n  handleTimeNavigation(event) {\n    var newDateTime = this.state.screenshotDateTime;\n    const intervalInHours = event.currentTarget.getAttribute('intervalhours');\n\n    if (intervalInHours) {\n      newDateTime = moment(this.state.screenshotDateTime).add(intervalInHours, 'hours').toDate();\n    } else {\n      console.log(\"Couldn't find the correct interval! Check your button attrs.\");\n    }\n\n    this.setState({screenshotDateTime: newDateTime});\n\n    ReactGA.event({\n      category: EVENT_CAT_VIEW_CHANGE,\n      action: 'time change by interval',\n      label: moment(newDateTime).format(EVENT_TRACKING_MOMENT_FORMAT),\n    });\n  }\n\n  updateLeftWebsite(newSite) {\n    this.setState({leftWebsite: newSite});\n  }\n\n  updateRightWebsite(newSite) {\n    this.setState({rightWebsite: newSite});\n  }\n\n  generateDeeplink() {\n    const year = this.state.screenshotDateTime.getUTCFullYear();\n    const month = this.state.screenshotDateTime.getUTCMonth() + 1;\n    const day = this.state.screenshotDateTime.getUTCDate();\n    const hour = this.state.screenshotDateTime.getUTCHours();\n\n    const { leftWebsite, rightWebsite } = this.state;\n\n    // this is leaking all sorts of implementation details about ports and such, but should do the trick\n    let base = \"localhost:3000\";\n    if (process.env.PUBLIC_URL) {\n      base = `https://${window.location.host}${process.env.PUBLIC_URL}`;\n    }\n\n    return `${base}/#/?year=${year}&month=${month}&day=${day}&hour=${hour}&siteOne=${leftWebsite}&siteTwo=${rightWebsite}`;\n  }\n\n  render() {\n    return (\n      <div className=\"App-wrapper\">\n        <NavBar />\n        <div className=\"container mt-5\">\n          <div className=\"form-row justify-content-md-center\">\n              {/* \n                TODO this would work much better with at \"timeline\"-like picker...like http://visjs.org/timeline_examples.html\n                https://github.com/namespace-ee/react-calendar-timeline\n                https://github.com/onejgordon/react-life-timeline\n                or create your own:\n                https://react-component.github.io/slider/\n                https://whoisandy.github.io/react-rangeslider/\n                https://github.com/davidchin/react-input-range\n              */}\n              <div className=\"datetimenav\">\n                <button type=\"button\" className=\"btn btn-info btn-sm\" intervalhours=\"-24\" onClick={this.handleTimeNavigation}>\n                  <FaAngleLeft />\n                  24 Hrs\n                </button>\n\n                <button type=\"button\" className=\"btn btn-info btn-sm\" intervalhours=\"-4\" onClick={this.handleTimeNavigation}>\n                  <FaAngleLeft />\n                  4 Hrs\n                </button>\n\n                <button type=\"button\" className=\"btn btn-info btn-sm mr-2\" intervalhours=\"-1\" onClick={this.handleTimeNavigation}>\n                  <FaAngleLeft />\n                  1 Hr\n                </button>\n\n                <DatePicker\n                  selected={this.state.screenshotDateTime}\n                  onChange={this.handleDayChange}\n                  showTimeSelect\n                  dateFormat=\"MMM d, yyyy ha\"\n                  timeFormat=\"HH\"\n                  timeIntervals={60}\n                  minDate={MIN_DATE}\n                  // TODO make sure timezones are being handled correctly here\n                  maxDate={MAX_DATE}\n                  className=\"form-control\"\n                />\n\n                <button type=\"button\" className=\"btn btn-info btn-sm ml-2\" intervalhours=\"1\" onClick={this.handleTimeNavigation}>\n                  1 Hr\n                  <FaAngleRight />\n                </button>\n\n                <button type=\"button\" className=\"btn btn-info btn-sm\" intervalhours=\"4\" onClick={this.handleTimeNavigation}>\n                  4 Hrs\n                  <FaAngleRight />\n                </button>\n\n                <button type=\"button\" className=\"btn btn-info btn-sm\" intervalhours=\"24\" onClick={this.handleTimeNavigation}>\n                  24 Hrs\n                  <FaAngleRight />\n                </button>\n              </div>\n          </div>\n\n          <div className=\"form-row justify-content-md-center\" id=\"share-link-wrapper\">\n            <CopyToClipboard\n              text={this.generateDeeplink()}\n              onCopy={() => {\n                this.setState({copyLinkText: 'Copied!'});\n                // Show confirmation for one second before setting \"copy link\" text back\n                setTimeout(() => this.setState({copyLinkText: SHARE_LINK_BTN_TEXT}), 1000);\n              }}\n            >\n              <button type=\"button\" className=\"btn btn-info btn-sm\">\n                { this.state.copyLinkText }\n              </button>\n            </CopyToClipboard>\n          </div>\n\n          {/* TODO I think <br> is bad so change this? */}\n          <br />\n          <div className=\"row\">\n            <div className=\"col\">\n              {/* TODO - somethin somethin fix this horrible whitespace, maybe https://www.w3schools.com/cssref/css3_pr_flex.asp */}\n              <div className=\"card-deck\">\n                <ScreenshotCard\n                  website={this.state.leftWebsite}\n                  year={this.state.screenshotDateTime.getUTCFullYear()}\n                  month={this.state.screenshotDateTime.getUTCMonth() + 1}\n                  day={this.state.screenshotDateTime.getUTCDate()}\n                  hour={this.state.screenshotDateTime.getUTCHours()}\n                  propogateWebsiteUpdate={this.updateLeftWebsite}\n                />\n                <ScreenshotCard\n                  website={this.state.rightWebsite}\n                  year={this.state.screenshotDateTime.getUTCFullYear()}\n                  month={this.state.screenshotDateTime.getUTCMonth() + 1}\n                  day={this.state.screenshotDateTime.getUTCDate()}\n                  hour={this.state.screenshotDateTime.getUTCHours()}\n                  propogateWebsiteUpdate={this.updateRightWebsite}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction screenshotUrl(website, year, month, day, hour) {\n  // https://d1k37mkoj29puy.cloudfront.net/foxnews.com/2019/3/15/23/2/screenshot.{png,jpeg}\n  // All screenshots are taken at the second minute of the hour. See:\n  // https://github.com/nrjones8/website-screenshotter#how-to-access-screenshots\n  return `https://d1k37mkoj29puy.cloudfront.net/${website}/${year}/${month}/${day}/${hour}/2/screenshot.jpeg`;\n}\n\nclass ScreenshotCard extends Component {\n  // keep it dumb, let the parent handle the changing logic (\"lift the state up\")\n  constructor(props) {\n    super(props);\n\n    // maybe someday I will understand this\n    this.handleWebsiteChange = this.handleWebsiteChange.bind(this);\n\n    this.state = {\n      websiteName: props.website,\n      imageStatus: IMAGE_STATUS_LOADING,\n    }\n  }\n\n  handleWebsiteChange(websiteName) {\n    this.setState({\n      websiteName: websiteName,\n      imageStatus: IMAGE_STATUS_LOADING,\n    });\n    ReactGA.event({\n      category: EVENT_CAT_VIEW_CHANGE,\n      action: 'website change',\n      label: websiteName,\n    });\n    this.props.propogateWebsiteUpdate(websiteName);\n  }\n\n  componentDidUpdate(prevProps) {\n    // When the parent component updates the date / time of the screenshot to display, that\n    // ends up changing the props of this component (the year/month/day/hour); as a result, we'll\n    // be loading a new image, and want to loading spinner to be displayed while that image is\n    // still in the process of being loaded.\n    //\n    // https://reactjs.org/docs/react-component.html#componentdidupdate\n    // \"Use this as an opportunity to operate on the DOM when the component has been updated.\n    // This is also a good place to do network requests as long as you compare the current props\n    // to previous props (e.g. a network request may not be necessary if the props have not\n    // changed)\"\n    const doesntMatch = prevProps.website !== this.props.website ||\n      prevProps.year !== this.props.year ||\n      prevProps.month !== this.props.month ||\n      prevProps.day !== this.props.day ||\n      prevProps.hour !== this.props.hour;\n\n    if (doesntMatch) {\n      this.setState({imageStatus: IMAGE_STATUS_LOADING});\n    }\n  }\n\n  render() {\n    const { imageStatus } = this.state;\n\n    return (\n      <div className=\"card App-card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <WebsitePicker website={this.state.websiteName} onWebsiteChange={this.handleWebsiteChange} />\n          </h5>\n          <p className=\"card-text\"><small className=\"text-muted\">{getWebsitePreviewText(this.state.websiteName)}</small></p>\n\n          {/* Show a loading spinner while image isn't loaded yet\n            https://getbootstrap.com/docs/4.4/components/spinners/#flex\n          */}\n          <div className=\"d-flex justify-content-center\">\n            <div className=\"spinner-border\" role=\"status\" style={{ display: imageStatus === IMAGE_STATUS_LOADING ? 'block' : 'none' }}></div>\n          </div>\n          <div className=\"d-flex justify-content-center\">\n            <div style={{ display: imageStatus === IMAGED_STATUS_FAILED ? 'block' : 'none' }}>\n              <p>Failed to load screenshot! It's likely the screenshot of this particular time was not captured correctly.</p>\n\n              <p>There is a known gap in screenshots from 10/18/2020 to 10/25/2020, due to a technical issue. The person who runs this project\n              is not pleased about this, but it has since been fixed. Sorry!\n              </p>\n\n              <p>If problems persist on other screenshots, please report the issue to newsscreenshotarchive@gmail.com.</p>\n            </div>\n          </div>\n\n          <a target=\"_blank\" href={screenshotUrl(this.state.websiteName, this.props.year, this.props.month, this.props.day, this.props.hour)}>\n            {/* Hide the image until it's loaded */}\n            <img\n              className=\"card-img-top\"\n              // Only website is in this component's state, the rest comes from the parent.\n              // The year/month/day/hour props are expected to be in UTC.\n              src={screenshotUrl(this.state.websiteName, this.props.year, this.props.month, this.props.day, this.props.hour)}\n              alt={\n                `Screenshot of the homepage of ${this.state.websiteName} taken on ` +\n                `${this.props.year}-${this.props.month}-${this.props.day}, ${this.props.hour} hours UTC`\n              }\n              style={{ display: imageStatus === IMAGE_STATUS_LOADED ? 'block' : 'none' }}\n              onLoad={() => this.setState({imageStatus: IMAGE_STATUS_LOADED})}\n              onError={() => this.setState({imageStatus: IMAGED_STATUS_FAILED})}\n            />\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass WebsitePicker extends Component {\n  // Thank you https://reactjs.org/docs/forms.html#the-select-tag\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onWebsiteChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <form>\n        <label>Website</label>\n        <select className=\"form-control\" value={this.props.website} onChange={this.handleChange}>\n          {\n            websites.map((websiteName) => {\n              return <option value={websiteName} key={websiteName}>{websiteName}</option>\n            })\n          }\n        </select>\n      </form>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport ReactGA from 'react-ga';\nimport { Route, HashRouter as Router } from 'react-router-dom'\n\nimport About from './About';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Import Bootstrap CSS and JS\nimport 'bootstrap/dist/js/bootstrap.js';\n\nconst trackingId = 'UA-154188236-1';\nReactGA.initialize(trackingId);\n// these will all just be '/' until the hashrouter is fixed, but better than nothing\nReactGA.pageview(window.location.pathname + window.location.search);\n\n\n// Good simple overview: https://codeburst.io/getting-started-with-react-router-5c978f70df91\n// Handling routing with Github Pages: https://github.com/facebook/create-react-app/issues/1765#issuecomment-327615099\n// TODO that routing isn't actually working :lolsob: fix it if we really need an about page\nconst routing = (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/about\" component={About} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}