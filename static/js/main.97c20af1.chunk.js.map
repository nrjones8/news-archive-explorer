{"version":3,"sources":["About.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","Component","websites","MIN_DATE","Date","MAX_DATE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDayChange","bind","assertThisInitialized","handleHourChange","queryParams","queryString","parse","location","search","state","getInitialState","console","log","originalDate","leftFromParams","siteOne","rightFromParams","siteTwo","leftWebsite","includes","rightWebsite","yearMonthDay","hour","newDay","setState","event","target","value","className","App_ScreenshotCard","website","year","getFullYear","month","getMonth","day","getDate","es","selected","onChange","minDate","maxDate","id","type","min","max","step","ScreenshotCard","_this2","handleWebsiteChange","websiteName","src","concat","alt","App_WebsitePicker","onWebsiteChange","WebsitePicker","_this3","handleChange","map","key","Boolean","window","hostname","match","routing","react_router_dom","basename","process","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97c20af1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n    return <h1>Why would anyone be interested in this</h1>\n  }\n}\nexport default About;\n","import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\n\nimport queryString from 'query-string';\n\n// Based largely on https://upmostly.com/tutorials/create-simple-web-app-react-airtable/\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst websites = [\n  \"nytimes.com\",\n  \"washingtonpost.com\",\n  \"cnn.com\",\n  \"wsj.com\",\n  \"foxnews.com\"\n];\n\n// When screenshots are first available - zero-indexed dates, this is JS\nconst MIN_DATE = new Date(2019, 0, 0);\n\n// TODO - make sure timezones are handled correctly here, they're probably not\nconst MAX_DATE = new Date();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleHourChange = this.handleHourChange.bind(this);\n\n    const queryParams = queryString.parse(props.location.search);\n    this.state = this.getInitialState(queryParams);\n  }\n\n  getInitialState(queryParams) {\n    console.log(queryParams);\n    const originalDate = new Date(2019, 3, 18);\n    const defaultLeft = \"nytimes.com\";\n    const defaultRight = \"cnn.com\"\n\n    const leftFromParams = queryParams.siteOne;\n    const rightFromParams = queryParams.siteTwo;\n\n    // TODO - display something if the provided website isn't one of the supported ones?\n    // otherwise just looks like a bug to a user if their URL includes website X but website\n    // Y shows up\n    const leftWebsite = (leftFromParams && websites.includes(leftFromParams))\n      ? leftFromParams\n      : defaultLeft;\n\n    const rightWebsite = (rightFromParams && websites.includes(rightFromParams))\n      ? rightFromParams\n      : defaultRight;\n\n    return {\n      leftWebsite: leftWebsite,\n      rightWebsite: rightWebsite,\n      yearMonthDay: originalDate,\n\n      hour: 12\n    };\n  }\n\n  handleDayChange(newDay) {\n    this.setState({yearMonthDay: newDay});\n  }\n\n  handleHourChange(event) {\n    this.setState({hour: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"card-deck\">\n              <ScreenshotCard \n                website={this.state.leftWebsite} \n                year={this.state.yearMonthDay.getFullYear()}\n                month={this.state.yearMonthDay.getMonth() + 1}\n                day={this.state.yearMonthDay.getDate()}\n                hour={this.state.hour} \n              />\n              <ScreenshotCard\n                website={this.state.rightWebsite}\n                year={this.state.yearMonthDay.getFullYear()} \n                month={this.state.yearMonthDay.getMonth() + 1}\n                day={this.state.yearMonthDay.getDate()}\n                hour={this.state.hour} \n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col col-md-auto\">\n            <h5>Day</h5>\n            {/* \n              TODO this would work much better with at \"timeline\"-like picker...like http://visjs.org/timeline_examples.html\n              https://github.com/namespace-ee/react-calendar-timeline\n              https://github.com/onejgordon/react-life-timeline\n              or create your own:\n              https://react-component.github.io/slider/\n              https://whoisandy.github.io/react-rangeslider/\n              https://github.com/davidchin/react-input-range\n            */}\n            <DatePicker\n              selected={this.state.yearMonthDay}\n              onChange={this.handleDayChange}\n              minDate={MIN_DATE}\n              // TODO make sure timezones are being handled correctly here\n              maxDate={MAX_DATE}\n            />\n          \n            <div id=\"hourPicker\">\n              <input\n                type=\"range\" \n                min=\"0\" max=\"23\" \n                value={this.state.hour} \n                onChange={this.handleHourChange}\n                step=\"1\"\n              />\n              {this.state.hour}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction screenshotUrl(website, year, month, day, hour) {\n  // https://d1k37mkoj29puy.cloudfront.net/foxnews.com/2019/3/15/23/2/screenshot.png\n  return `https://d1k37mkoj29puy.cloudfront.net/${website}/${year}/${month}/${day}/${hour}/2/screenshot.png`;\n}\n\nclass ScreenshotCard extends Component {\n  // keep it dumb, let the parent handle the changing logic (\"lift the state up\")\n  constructor(props) {\n    super(props);\n\n    // maybe someday I will understand this\n    this.handleWebsiteChange = this.handleWebsiteChange.bind(this);\n\n    this.state = {\n      websiteName: props.website,\n    }\n  }\n\n  handleWebsiteChange(websiteName) {\n    this.setState({websiteName: websiteName});\n  }\n\n  render() {\n    return (\n      <div className=\"card\">\n        <img \n          className=\"card-img-top\" \n          // Only website is in this component's state, the rest comes from the parent\n          src={screenshotUrl(this.state.websiteName, this.props.year, this.props.month, this.props.day, this.props.hour)} alt=\"Card cap\" \n        />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <WebsitePicker website={this.state.websiteName} onWebsiteChange={this.handleWebsiteChange} />\n          </h5>\n          {/* TODO - put some useful text here? E.g. wsj.com has a bunch of undismissed modals. Caveat it? */}\n          <p className=\"card-text\"><small className=\"text-muted\">something here?</small></p>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass WebsitePicker extends Component {\n  // Thank you https://reactjs.org/docs/forms.html#the-select-tag\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onWebsiteChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <form>\n        <label>Website</label>\n        <select className=\"form-control\" value={this.props.website} onChange={this.handleChange}>\n          {\n            websites.map((websiteName) => {\n              return <option value={websiteName} key={websiteName}>{websiteName}</option>\n            })\n          }\n        </select>\n      </form>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\n\nimport About from './About';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Import Bootstrap CSS and JS\nimport 'bootswatch/dist/litera/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\n\n\n// Good simple overview: https://codeburst.io/getting-started-with-react-router-5c978f70df91\n// Handling routing with Github Pages: https://github.com/facebook/create-react-app/issues/1765#issuecomment-327615099\nconst routing = (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/about\" component={About} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}