{"version":3,"sources":["About.js","NavBar.js","WebsiteUtils.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","Component","NavBar","className","WAPO","WSJ","websites","MIN_DATE","Date","MAX_DATE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDayChange","bind","assertThisInitialized","handleTimeNavigation","queryParams","queryString","parse","location","search","state","getInitialState","leftFromParams","siteOne","rightFromParams","siteTwo","leftWebsite","includes","rightWebsite","providedYear","parseInt","year","providedMonth","month","providedDay","day","providedHour","hour","targetDate","screenshotDateTime","newDay","setState","event","newDateTime","intervalInHours","currentTarget","getAttribute","moment","add","toDate","console","log","src_NavBar","type","intervalhours","onClick","index_esm","es","selected","onChange","showTimeSelect","dateFormat","timeFormat","timeIntervals","minDate","maxDate","App_ScreenshotCard","website","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","screenshotUrl","concat","ScreenshotCard","_this2","handleWebsiteChange","websiteName","App_WebsitePicker","onWebsiteChange","site","_previewText","defineProperty","getWebsitePreviewText","target","href","src","alt","WebsitePicker","_this3","handleChange","value","map","key","Boolean","window","hostname","match","routing","react_router_dom","basename","process","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23499b38.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n    return <h1>Why would anyone be interested in this</h1>\n  }\n}\nexport default About;\n","import React, { Component } from 'react';\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <div className=\"navbar-brand\">News Homepage Archive</div>\n      </nav>\n    )\n  }\n}\n\nexport default NavBar;\n","const NYT = \"nytimes.com\";\nconst WAPO = \"washingtonpost.com\";\nconst CNN = \"cnn.com\";\nconst WSJ = \"wsj.com\";\nconst FOX = \"foxnews.com\";\n\nconst websites = [NYT, WAPO, CNN, WSJ, FOX];\n\nfunction getWebsitePreviewText(site) {\n    const previewText = {\n        [WAPO]: \"For large parts of January and February 2019, screenshots failed \" +\n            \"only for washingtonpost.com. You may see a higher rate of blank \" +\n            \"screenshots during this period.\",\n        [WSJ]: \"For a large part of April and start of May 2019, the WSJ had an undismissed \" +\n            \"modal appear on the homepage. Screenshots during this period unfortunately are \" +\n            \"hidden beneath that modal; this will be changed soon!\"\n    }\n\n    // Fine with returning a default of null\n    return previewText[site];\n}\n\nexport {\n    websites,\n    getWebsitePreviewText\n}\n","import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\n\nimport { FaAngleLeft, FaAngleRight } from 'react-icons/fa';\n\nimport queryString from 'query-string';\nimport moment from 'moment';\n\nimport NavBar from './NavBar.js';\nimport { websites, getWebsitePreviewText } from './WebsiteUtils.js';\n\n// Based largely on https://upmostly.com/tutorials/create-simple-web-app-react-airtable/\n\nimport 'bootswatch/dist/litera/bootstrap.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './App.css';\n\n// When screenshots are first available - zero-indexed dates, this is JS\nconst MIN_DATE = new Date(2019, 0, 0);\n\n// TODO - make sure timezones are handled correctly here, they're probably not\nconst MAX_DATE = new Date();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleTimeNavigation = this.handleTimeNavigation.bind(this);\n\n    const queryParams = queryString.parse(props.location.search);\n    this.state = this.getInitialState(queryParams);\n  }\n\n  getInitialState(queryParams) {\n    const defaultLeft = \"nytimes.com\";\n    const defaultRight = \"cnn.com\"\n\n    const leftFromParams = queryParams.siteOne;\n    const rightFromParams = queryParams.siteTwo;\n\n    // TODO - display something if the provided website isn't one of the supported ones?\n    // otherwise just looks like a bug to a user if their URL includes website X but website\n    // Y shows up\n    const leftWebsite = (leftFromParams && websites.includes(leftFromParams))\n      ? leftFromParams\n      : defaultLeft;\n\n    const rightWebsite = (rightFromParams && websites.includes(rightFromParams))\n      ? rightFromParams\n      : defaultRight;\n\n    const providedYear = parseInt(queryParams.year);\n    // Zero-indexed\n    const providedMonth = parseInt(queryParams.month) - 1;\n    const providedDay = parseInt(queryParams.day);\n    const providedHour = parseInt(queryParams.hour);\n    // TODO this is a pretty janky way to handle dates...\n    const targetDate = new Date(\n      providedYear ? providedYear : 2019,\n      providedMonth ? providedMonth : 2,\n      providedDay ? providedDay : 26,\n      // Default to 9am local time if not provided\n      providedHour ? providedHour : 9\n    );\n\n    // TODO - definitely display something if we can't parse the date\n    // TODO - this is likely redundant with the targetDate stuff above\n    const dateToUse = (targetDate && targetDate > MIN_DATE && targetDate <= MAX_DATE)\n      ? targetDate\n      : new Date(2019, 2, 26, 13);\n\n    return {\n      leftWebsite: leftWebsite,\n      rightWebsite: rightWebsite,\n      screenshotDateTime: dateToUse,\n    };\n  }\n\n  handleDayChange(newDay) {\n    this.setState({screenshotDateTime: newDay});\n  }\n\n  handleTimeNavigation(event) {\n    var newDateTime = this.state.screenshotDateTime;\n    const intervalInHours = event.currentTarget.getAttribute('intervalhours');\n\n    if (intervalInHours) {\n      newDateTime = moment(this.state.screenshotDateTime).add(intervalInHours, 'hours').toDate();\n    } else {\n      console.log(\"Couldn't find the correct interval! Check your button attrs.\");\n    }\n\n    this.setState({screenshotDateTime: newDateTime});\n  }\n\n  // TODO create the proper URL for someone to share the current view (i.e. based on 2 websites shown and date/time)\n  generateDeeplink() {}\n\n  render() {\n    return (\n      <div className=\"App-wrapper\">\n        <NavBar />\n        <div className=\"container mt-5\">\n          <div className=\"form-row justify-content-md-center\">\n              {/* \n                TODO this would work much better with at \"timeline\"-like picker...like http://visjs.org/timeline_examples.html\n                https://github.com/namespace-ee/react-calendar-timeline\n                https://github.com/onejgordon/react-life-timeline\n                or create your own:\n                https://react-component.github.io/slider/\n                https://whoisandy.github.io/react-rangeslider/\n                https://github.com/davidchin/react-input-range\n              */}\n              <div className=\"datetimenav\">\n                <button type=\"button\" className=\"btn btn-info btn-sm\" intervalhours=\"-24\" onClick={this.handleTimeNavigation}>\n                  <FaAngleLeft />\n                  24 Hrs\n                </button>\n\n                <button type=\"button\" className=\"btn btn-info btn-sm\" intervalhours=\"-4\" onClick={this.handleTimeNavigation}>\n                  <FaAngleLeft />\n                  4 Hrs\n                </button>\n\n                <button type=\"button\" className=\"btn btn-info btn-sm mr-2\" intervalhours=\"-1\" onClick={this.handleTimeNavigation}>\n                  <FaAngleLeft />\n                  1 Hr\n                </button>\n\n                <DatePicker\n                  selected={this.state.screenshotDateTime}\n                  onChange={this.handleDayChange}\n                  showTimeSelect\n                  dateFormat=\"MMMM d, yyyy ha\"\n                  timeFormat=\"HH\"\n                  timeIntervals={60}\n                  minDate={MIN_DATE}\n                  // TODO make sure timezones are being handled correctly here\n                  maxDate={MAX_DATE}\n                  className=\"form-control\"\n                />\n\n                <button type=\"button\" className=\"btn btn-info btn-sm ml-2\" intervalhours=\"1\" onClick={this.handleTimeNavigation}>\n                  1 Hr\n                  <FaAngleRight />\n                </button>\n\n                <button type=\"button\" className=\"btn btn-info btn-sm\" intervalhours=\"4\" onClick={this.handleTimeNavigation}>\n                  4 Hrs\n                  <FaAngleRight />\n                </button>\n\n                <button type=\"button\" className=\"btn btn-info btn-sm\" intervalhours=\"24\" onClick={this.handleTimeNavigation}>\n                  24 Hrs\n                  <FaAngleRight />\n                </button>\n              </div>\n\n            {/* TODO - \"share current view\" button */}\n\n          </div>\n\n          {/* TODO I think <br> is bad so change this? */}\n          <br />\n          <div className=\"row\">\n            <div className=\"col\">\n              {/* TODO - somethin somethin fix this horrible whitespace, maybe https://www.w3schools.com/cssref/css3_pr_flex.asp */}\n              <div className=\"card-deck\">\n                <ScreenshotCard\n                  website={this.state.leftWebsite}\n                  year={this.state.screenshotDateTime.getUTCFullYear()}\n                  month={this.state.screenshotDateTime.getUTCMonth() + 1}\n                  day={this.state.screenshotDateTime.getUTCDate()}\n                  hour={this.state.screenshotDateTime.getUTCHours()}\n                />\n                <ScreenshotCard\n                  website={this.state.rightWebsite}\n                  year={this.state.screenshotDateTime.getUTCFullYear()}\n                  month={this.state.screenshotDateTime.getUTCMonth() + 1}\n                  day={this.state.screenshotDateTime.getUTCDate()}\n                  hour={this.state.screenshotDateTime.getUTCHours()}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction screenshotUrl(website, year, month, day, hour) {\n  // https://d1k37mkoj29puy.cloudfront.net/foxnews.com/2019/3/15/23/2/screenshot.{png,jpeg}\n  // All screenshots are taken at the second minute of the hour. See:\n  // https://github.com/nrjones8/website-screenshotter#how-to-access-screenshots\n  return `https://d1k37mkoj29puy.cloudfront.net/${website}/${year}/${month}/${day}/${hour}/2/screenshot.jpeg`;\n}\n\nclass ScreenshotCard extends Component {\n  // keep it dumb, let the parent handle the changing logic (\"lift the state up\")\n  constructor(props) {\n    super(props);\n\n    // maybe someday I will understand this\n    this.handleWebsiteChange = this.handleWebsiteChange.bind(this);\n\n    this.state = {\n      websiteName: props.website,\n    }\n  }\n\n  handleWebsiteChange(websiteName) {\n    this.setState({websiteName: websiteName});\n  }\n\n  render() {\n    return (\n      <div className=\"card App-card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <WebsitePicker website={this.state.websiteName} onWebsiteChange={this.handleWebsiteChange} />\n          </h5>\n          <p className=\"card-text\"><small className=\"text-muted\">{getWebsitePreviewText(this.state.websiteName)}</small></p>\n          <a target=\"_blank\" href={screenshotUrl(this.state.websiteName, this.props.year, this.props.month, this.props.day, this.props.hour)}>\n            <img\n              className=\"card-img-top\"\n              // Only website is in this component's state, the rest comes from the parent.\n              // The year/month/day/hour props are expected to be in UTC.\n              src={screenshotUrl(this.state.websiteName, this.props.year, this.props.month, this.props.day, this.props.hour)}\n              alt={\n                `Screenshot of the homepage of ${this.state.websiteName} taken on ` +\n                `${this.props.year}-${this.props.month}-${this.props.day}, ${this.props.hour} hours UTC`\n              }\n            />\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass WebsitePicker extends Component {\n  // Thank you https://reactjs.org/docs/forms.html#the-select-tag\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onWebsiteChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <form>\n        <label>Website</label>\n        <select className=\"form-control\" value={this.props.website} onChange={this.handleChange}>\n          {\n            websites.map((websiteName) => {\n              return <option value={websiteName} key={websiteName}>{websiteName}</option>\n            })\n          }\n        </select>\n      </form>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\n\nimport About from './About';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Import Bootstrap CSS and JS\nimport 'bootstrap/dist/js/bootstrap.js';\n\n\n// Good simple overview: https://codeburst.io/getting-started-with-react-router-5c978f70df91\n// Handling routing with Github Pages: https://github.com/facebook/create-react-app/issues/1765#issuecomment-327615099\n// TODO that routing isn't actually working :lolsob: fix it if we really need an about page\nconst routing = (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/about\" component={About} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}