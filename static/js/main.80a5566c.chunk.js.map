{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["websites","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDayChange","bind","assertThisInitialized","handleHourChange","originalDate","Date","state","leftWebsite","rightWebsite","year","month","day","yearMonthDay","hour","newDay","setState","event","target","value","react_default","a","createElement","className","App_ScreenshotCard","website","getFullYear","getMonth","getDate","es","selected","onChange","id","type","min","max","step","Component","ScreenshotCard","_this2","handleWebsiteChange","websiteName","src","concat","alt","App_WebsitePicker","onWebsiteChange","WebsitePicker","_this3","handleChange","map","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80a5566c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\n\n// Based largely on https://upmostly.com/tutorials/create-simple-web-app-react-airtable/\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst websites = [\n  \"nytimes.com\",\n  \"washingtonpost.com\",\n  \"cnn.com\",\n  \"wsj.com\",\n  \"foxnews.com\"\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleHourChange = this.handleHourChange.bind(this);\n\n    // month is zero-indexed\n    const originalDate = new Date(2019, 3, 18);\n    // TODO get these from URL so people can deep-link to specific times / websites\n    this.state = {\n      leftWebsite: \"nytimes.com\",\n      rightWebsite: \"foxnews.com\",\n      year: 2019,\n      month: 4,\n      day: 18,\n      yearMonthDay: originalDate,\n\n      hour: 12\n    }\n  }\n\n  handleDayChange(newDay) {\n    this.setState({yearMonthDay: newDay});\n  }\n\n  handleHourChange(event) {\n    this.setState({hour: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"card-deck\">\n              <ScreenshotCard \n                website={this.state.leftWebsite} \n                year={this.state.yearMonthDay.getFullYear()}\n                month={this.state.yearMonthDay.getMonth() + 1}\n                day={this.state.yearMonthDay.getDate()}\n                hour={this.state.hour} \n              />\n              <ScreenshotCard\n                website={this.state.rightWebsite}\n                year={this.state.yearMonthDay.getFullYear()} \n                month={this.state.yearMonthDay.getMonth() + 1}\n                day={this.state.yearMonthDay.getDate()}\n                hour={this.state.hour} \n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col col-md-auto\">\n            <h5>Day</h5>\n            {/* TODO limit dates from start of 2019 --> present */}\n            {/* \n              TODO this would work much better with at \"timeline\"-like picker...like http://visjs.org/timeline_examples.html\n              https://github.com/namespace-ee/react-calendar-timeline\n              https://github.com/onejgordon/react-life-timeline\n              or create your own:\n              https://react-component.github.io/slider/\n              https://whoisandy.github.io/react-rangeslider/\n              https://github.com/davidchin/react-input-range\n            */}\n            <DatePicker selected={this.state.yearMonthDay} onChange={this.handleDayChange} />\n          \n            <div id=\"hourPicker\">\n              <input\n                type=\"range\" \n                min=\"0\" max=\"23\" \n                value={this.state.hour} \n                onChange={this.handleHourChange}\n                step=\"1\"\n              />\n              {this.state.hour}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction screenshotUrl(website, year, month, day, hour) {\n  // https://d1k37mkoj29puy.cloudfront.net/foxnews.com/2019/3/15/23/2/screenshot.png\n  return `https://d1k37mkoj29puy.cloudfront.net/${website}/${year}/${month}/${day}/${hour}/2/screenshot.png`;\n}\n\nclass ScreenshotCard extends Component {\n  // keep it dumb, let the parent handle the changing logic (\"lift the state up\")\n  constructor(props) {\n    super(props);\n\n    // maybe someday I will understand this\n    this.handleWebsiteChange = this.handleWebsiteChange.bind(this);\n\n    this.state = {\n      websiteName: props.website,\n    }\n  }\n\n  handleWebsiteChange(websiteName) {\n    this.setState({websiteName: websiteName});\n  }\n\n  render() {\n    return (\n      <div className=\"card\">\n        <img \n          className=\"card-img-top\" \n          // Only website is in this component's state, the rest comes from the parent\n          src={screenshotUrl(this.state.websiteName, this.props.year, this.props.month, this.props.day, this.props.hour)} alt=\"Card cap\" \n        />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <WebsitePicker website={this.state.websiteName} onWebsiteChange={this.handleWebsiteChange} />\n          </h5>\n          <p className=\"card-text\"><small className=\"text-muted\">something here?</small></p>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass WebsitePicker extends Component {\n  // Thank you https://reactjs.org/docs/forms.html#the-select-tag\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onWebsiteChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          Select website:\n          <select value={this.props.website} onChange={this.handleChange}>\n            {\n              websites.map((websiteName) => {\n                return <option value={websiteName} key={websiteName}>{websiteName}</option>\n              })\n            }\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Import Bootstrap CSS and JS\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}